import logging
import asyncio
from aiogram import executor, types

import settings as sets
from mqtt import mqtt_publish, mqtt_subscribe, mqtt_unsubscribe, connect_mqtt

# from paho.mqtt import client as client_mqtt
# from env import TOKEN_API, BOT_WEBHOOK_URL
# from env import MQTT_PORT, MQTT_HOST, MQTT_PASSWORD, MQTT_USERNAME, MQTT_CLIENT_ID


# DEPENDENCIES
# dependencies = sets.sets.dependencies
# sets.flag = sets.sets.flag
# sets.received_message = sets.sets.received_message

nto_bot = sets.nto_bot
nto_dp = sets.nto_dp


# TELEGRAM BOT

HELP_COMMANDS = """
<b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</b>
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
<em>cat</em> - –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç—ç

<b>–†–∞–±–æ—Ç–∞ —Å MQTTT</b>
/pub &lt;topic&gt; <em>&lt;qos=0|1|2&gt;</em> &lt;payload&gt; - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ topic
‚Ä¢ <em>qos</em> - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
/sub &lt;topic&gt; - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ topic
/unsub &lt;topic&gt; - –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ topic
"""

mqtt_client = connect_mqtt()
mqtt_client.loop_start()


async def on_startup(_):
    # print('Bot is running')
    asyncio.create_task(check())


@nto_dp.message_handler(commands=['start'])
async def hello(message: types.Message):
    # await sets.received_message.reply("<em>Hello!<em>üëãüèª\nIt's a NTO_MQTT_TEST_BOT :) üòé", parse_mode='HTML')
    # global client
    # client = connect_mqtt()
    # client.loop_start()
    await nto_bot.send_message(chat_id=message.from_user.id,
                               text="<b>–ü—Ä–∏–≤–µ—Ç!</b>üëãüèª\n"
                                    "–≠—Ç–æ <em>NTO_MQTT_TEST_BOT</em> :) üòé\n"
                                    "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–º–æ—â—å—é /help",
                               parse_mode='HTML')


@nto_dp.message_handler(commands=['help', 'about', 'info'])
async def about(message: types.Message):
    await message.reply(HELP_COMMANDS, parse_mode='HTML')


@nto_dp.message_handler(regexp='(^cat[s]?$|puss)')
async def cat(message: types.Message):
    with open('../data/hello_cat.jpg', 'rb') as photo:
        await message.reply_photo(photo=photo, caption='–ü—Ä–∏–≤–µ—Ç –æ—Ç –∫–æ—Ç—ç üò∫')


@nto_dp.message_handler(commands=['pub'])
async def publish(message: types.Message):
    # await mqtt.publish("/test", "Hello from Fastapi")
    data = message.text.split()
    if len(data) < 3:
        await message.reply('‚ùå –Ω–µ —É–∫–∞–∑–∞–Ω topic –∏–ª–∏ payload')
    else:
        global mqtt_client
        topic = data[1]
        success = '‚úÖ ok\n' + 'üíæ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'
        if 'qos=' in data[2]:
            qos = int(data[2][4])
            msg = ' '.join(data[3:])
            if qos > 2:
                await message.reply('‚ùå qos –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 0, 1 –∏–ª–∏ 2')
            else:
                mqtt_publish(client=mqtt_client, topic=topic, msg=msg, qos=qos)
                await message.reply(success)
        else:
            qos = 0
            msg = ' '.join(data[2:])
            mqtt_publish(client=mqtt_client, topic=topic, msg=msg, qos=qos)
            await message.reply(success)


@nto_dp.message_handler(commands=['sub'])
async def subscribe(message: types.Message):
    # await mqtt.publish("/test", "Hello from Fastapi")
    data = message.text.split()
    if len(data) < 2:
        await message.reply('‚ùå –Ω–µ —É–∫–∞–∑–∞–Ω topic')
    else:
        user_id = message.from_user.id
        topic = data[1]
        success = "‚úÖ ok\n" + "üì® –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞"
        debug_message = '[DEBUG] ' + 'new subscriber: ' + str(user_id)

        global mqtt_client
        if topic in sets.dependencies:
            users = sets.dependencies[topic]
            if user_id not in users:
                users += [user_id]
                print(debug_message)
                await message.reply(success)
            else:
                await message.reply('‚ùå –≤—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π topic')
        else:
            sets.dependencies[topic] = [user_id]
            mqtt_subscribe(client=mqtt_client, topic=topic)
            print(debug_message)
            await message.reply(success)


@nto_dp.message_handler(commands=['unsub'])
async def unsubscribe(message: types.Message):
    data = message.text.split()
    if len(data) < 2:
        await message.reply('‚ùå –Ω–µ —É–∫–∞–∑–∞–Ω topic')
    else:
        # global user_id
        user_id = message.from_user.id
        topic = data[1]
        error = '‚ùå –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π topic'

        global mqtt_client
        if topic in sets.dependencies:
            users = sets.dependencies[topic]
            if user_id in users:
                users.remove(user_id)
                print('[DEBUG] ' + 'unsubscribe: ' + str(user_id))
                await message.reply("‚úÖ ok\n"
                                    "üì§ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            else:
                await message.reply(error)
            if len(users) == 0:
                mqtt_unsubscribe(client=mqtt_client, topic=topic)
                sets.dependencies.pop(topic)
        else:
            await message.reply(error)


async def check():
    # global sets.flag, sets.received_message
    print('Start Check task')
    # if not sets.flag:
    #     await asyncio.sleep(5)
    while True:
        if sets.flag:
            topic = sets.received_message['topic']
            payload = sets.received_message['payload']
            if topic in sets.dependencies:
                if len(topic) > 0:
                    for user_id in sets.dependencies[topic]:
                        text = f"üîπ <em>From <b>{topic}</b></em> \n" \
                               f"{payload}"
                        await nto_bot.send_message(chat_id=user_id, text=text, parse_mode='HTML')
                else:
                    print('[ERROR] ' + 'Nobody has subscribed to this topic!')
            else:
                print('[ERROR] ' + 'This topic is not in the `sets.dependencies`!')
            print('[DEBUG] ' + 'sets.dependencies: ', sets.dependencies)
            sets.flag = False
        else:
            await asyncio.sleep(1)


# @nto_dp.message_handler()
# async def echo(sets.received_message: types.Message):
#     await nto_bot.send_message(chat_id=sets.received_message.from_user.id,
#                                text=f"You said: '{sets.received_message.text}'",
#                                parse_mode='HTML')

# async def main():
#     task_1 = asyncio.create_task(executor.start_polling(nto_dp, skip_updates=True, on_startup=on_startup))
#     task_2 = asyncio.create_task(check())
#     await asyncio.gather(task_2, task_1)

if __name__ == '__main__':
    # asyncio.run(main())

    logging.basicConfig(level=logging.INFO)
    # ioloop = asyncio.new_event_loop()
    # # tasks = [ioloop.create_task(check()),
    # #          ioloop.create_task(executor.start_polling(nto_dp, skip_updates=True, on_startup=on_startup))]
    # # wait_tasks = asyncio.wait(tasks)
    # # ioloop.run_until_complete(wait_tasks)
    # asyncio.run(main(ioloop))

    # asyncio.create_task(executor.start_polling(nto_dp, skip_updates=True, on_startup=on_startup))
    # asyncio.create_task(main())

    executor.start_polling(nto_dp, skip_updates=True, on_startup=on_startup)
    # asyncio.run(echo())
